name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Authenticate to Google Cloud
    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    # Set up Cloud SDK
    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    # Enable necessary APIs
    - name: Enable APIs
      run: |
        gcloud services enable artifactregistry.googleapis.com
        gcloud services enable run.googleapis.com
        gcloud services enable bigquery.googleapis.com
        gcloud services enable cloudscheduler.googleapis.com
        gcloud services enable secretmanager.googleapis.com

    # Create Artifact Registry repository if it doesn't exist
    - name: Create Artifact Registry repository
      run: |
        # Check if repository exists
        if ! gcloud artifacts repositories describe like-her --location=asia-northeast1 &>/dev/null; then
          echo "Creating Artifact Registry repository 'like-her'..."
          gcloud artifacts repositories create like-her \
            --repository-format=docker \
            --location=asia-northeast1 \
            --description="Docker repository for Like Her application"
        else
          echo "Repository 'like-her' already exists."
        fi

    # Configure Docker for Artifact Registry
    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker asia-northeast1-docker.pkg.dev --quiet
        
    # Building and pushing API container
    - name: Build API container
      run: |
        docker build -t asia-northeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/like-her/like-her-api:latest ./app/api
        docker push asia-northeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/like-her/like-her-api:latest

    # Building and pushing Frontend container
    - name: Build Frontend container
      run: |
        docker build -t asia-northeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/like-her/like-her-frontend:latest ./app/frontend
        docker push asia-northeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/like-her/like-her-frontend:latest

    # Building and pushing Scheduler container
    - name: Build Scheduler container
      run: |
        docker build -t asia-northeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/like-her/like-her-scheduler:latest ./app/scheduler
        docker push asia-northeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/like-her/like-her-scheduler:latest

    # Set up Terraform with explicit Terraform Cloud token handling
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.7
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Create Terraform credentials file explicitly
    - name: Setup Terraform Credentials
      run: |
        cat > ~/.terraformrc << EOF
        credentials "app.terraform.io" {
          token = "${{ secrets.TF_API_TOKEN }}"
        }
        EOF
        chmod 0600 ~/.terraformrc

    # Initialize Terraform and handle resource state
    - name: Terraform Init and State Setup
      run: |
        cd infrastructure/terraform
        terraform init
        
        # Try to import Secret Manager secret if it exists
        terraform import google_secret_manager_secret.gemini_api_key projects/${{ secrets.GCP_PROJECT_ID }}/secrets/gemini-api-key || echo "Secret doesn't exist yet, will be created"
        
        # We'll let Terraform create BigQuery resources from scratch
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

    # Apply Terraform with project_id, Gemini API key, AI Builder agent ID, and Google credentials
    - name: Terraform Apply
      run: |
        cd infrastructure/terraform
        # Store the credentials in a temporary file
        echo '${{ secrets.GCP_SA_KEY }}' > google_credentials.json
        
        # Use the file for authentication
        terraform apply -auto-approve \
          -var "project_id=${{ secrets.GCP_PROJECT_ID }}" \
          -var "gemini_api_key=${{ secrets.GEMINI_API_KEY }}" \
          -var "agent_id=${{ secrets.AGENT_ID }}" \
          -var "google_credentials=$(cat google_credentials.json)" \
          -var "allowed_user_email=${{ secrets.YOUR_EMAIL_ADDRESS }}"
        
        # Clean up
        rm google_credentials.json
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

    # Note: We no longer need to deploy to Cloud Run manually as Terraform handles it
    # The IAM policies are also now handled by Terraform